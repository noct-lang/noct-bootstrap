<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!--Types-->
  <Type Name="Noctis::TypeHandle">
    <DisplayString Condition="type._Ptr == 0">invalid</DisplayString>
    <DisplayString>type-handle {type->type}</DisplayString>
    <Expand>
      <ExpandedItem Condition="type._Ptr != 0">type->type</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::Type&gt;">
    <DisplayString Condition="_Ptr == 0">invalid-type</DisplayString>
    <DisplayString>{*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="Noctis::Type">
    <DisplayString>{{kind='{typeKind}'}}</DisplayString>
    <Expand>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Builtin">builtin</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Iden">iden</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Ptr">ptr</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Ref">ref</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Slice">slice</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Array">arr</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Tuple">tup</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Opt">opt</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Compound">compound</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Func">func</ExpandedItem>
      <ExpandedItem Condition="typeKind==Noctis::TypeKind::Generic">generic</ExpandedItem>
    </Expand>
  </Type>

  <!--QualName-->
  <Type Name="std::shared_ptr&lt;Noctis::QualName&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>{*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="Noctis::QualName">
    <DisplayString>qualname {m_Idens}, generics={m_Generics}</DisplayString>
    <Expand>
      <Item Name="[disambig]">m_Disambiguation</Item>
      <ArrayItems>
        <Size>m_Idens._Mypair._Myval2._Myend - m_Idens._Mypair._Myval2._Myfirst</Size>
        <ValuePointer>m_Idens._Mypair._Myval2._Myfirst</ValuePointer>
      </ArrayItems>
      <Item Name="[generics]">m_Generics</Item>
    </Expand>
  </Type>
  <Type Name="Noctis::TypeDisambiguation">
    <DisplayString>{{type='{m_Type}', iface='{m_QualName}'}}</DisplayString>
    <Expand>
      <Item Name="[type]">m_Type</Item>
      <Item Name="[iface]">m_QualName</Item>
    </Expand>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::TypeDisambiguation&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>disambig {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>

  <!--Symbol-->
  <Type Name="Noctis::Symbol">
    <DisplayString>{{ vis={vis}, kind={kind}, {qualName}}}</DisplayString>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::Symbol&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>symbol {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="std::weak_ptr&lt;Noctis::Symbol&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString Condition="_Rep->_Uses == 0">expired</DisplayString>
    <DisplayString>symbol {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0 &amp;&amp; _Rep->_Uses != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>

  <!--SymbolInst-->
  <Type Name="Noctis::SymbolInst">
    <DisplayString>{{ {qualName}}}</DisplayString>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::SymbolInst&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>symbol-inst {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="std::weak_ptr&lt;Noctis::SymbolInst&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString Condition="_Rep->_Uses == 0">expired</DisplayString>
    <DisplayString>symbol {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>

  <!--Symbol tables-->
  <Type Name="std::shared_ptr&lt;Noctis::SymbolSubTable&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>symbol-inst {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::ModuleSymbolTable&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>symbol-inst {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::ScopedSymbolTable&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>symbol-inst {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>

  <!--FuncCtx-->
  <Type Name="std::shared_ptr&lt;Noctis::FuncContext&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>funcCtx {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
  <Type Name="std::shared_ptr&lt;Noctis::LocalVarScope&gt;">
    <DisplayString Condition="_Ptr == 0">empty</DisplayString>
    <DisplayString>localVarScope {*_Ptr}</DisplayString>
    <Expand>
      <ExpandedItem Condition="_Ptr != 0">*_Ptr</ExpandedItem>
      <Item Name="[ptr]">_Ptr</Item>
    </Expand>
  </Type>
</AutoVisualizer>